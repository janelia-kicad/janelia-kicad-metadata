#+EXPORT_FILE_NAME: README.md
#+OPTIONS: toc:1 |:t ^:nil tags:nil

# Place warning at the top of the exported file
#+BEGIN_EXAMPLE
<!-- This file is generated automatically from .metadata.org -->
<!-- File edits may be overwritten! -->
#+END_EXAMPLE

* Project Specific Variables                                       :noexport:

#+NAME: name
#+BEGIN_SRC text :exports none :noweb yes
project_name
#+END_SRC

#+NAME: repository-name
#+BEGIN_SRC text :exports none :noweb yes
repository_name
#+END_SRC

#+NAME: version
#+BEGIN_SRC text :exports none :noweb yes
0.1.0
#+END_SRC

#+NAME: description
#+BEGIN_SRC text :exports none :noweb yes
Project documentation.
#+END_SRC

#+NAME: references
#+BEGIN_SRC text :exports none :noweb yes
https://www.kicad.org/
#+END_SRC

#+NAME: creation-date
#+BEGIN_SRC text :exports none :noweb yes
2023-01-01
#+END_SRC

* General and Derived Variables                                    :noexport:

#+NAME: release-month-day
#+BEGIN_SRC emacs-lisp :exports none :noweb yes
(format-time-string "%m-%d")
#+END_SRC

#+NAME: release-year
#+BEGIN_SRC emacs-lisp :exports none :noweb ye
(format-time-string "%Y")
#+END_SRC

#+NAME: release-date
#+BEGIN_SRC text :exports none :noweb yes
<<release-year()>>-<<release-month-day()>>
#+END_SRC

#+NAME: license
#+BEGIN_SRC text :exports none :noweb yes
BSD-3-Clause
#+END_SRC

#+NAME: guix-license
#+BEGIN_SRC text :exports none :noweb yes
license:bsd-3
#+END_SRC

#+NAME: license-files
#+BEGIN_SRC text :exports none :noweb yes
LICENSE
#+END_SRC

#+NAME: repository-organization
#+BEGIN_SRC text :exports none :noweb yes
janelia-kicad
#+END_SRC

#+NAME: forge
#+BEGIN_SRC text :exports none :noweb yes
github.com
#+END_SRC

#+NAME: repository-url
#+BEGIN_SRC text :exports none :noweb yes
https://<<forge>>/<<repository-organization>>/<<repository-name>>
#+END_SRC

#+NAME: code-repository
#+BEGIN_SRC text :exports none :noweb yes
git+<<repository-url>>.git
#+END_SRC

#+NAME: author-given-name
#+BEGIN_SRC text :exports none :noweb yes
Peter
#+END_SRC

#+NAME: author-family-name
#+BEGIN_SRC text :exports none :noweb yes
Polidoro
#+END_SRC

#+NAME: author
#+BEGIN_SRC text :exports none :noweb yes
<<author-given-name>> <<author-family-name>>
#+END_SRC

#+NAME: email
#+BEGIN_SRC text :exports none :noweb yes
peter@polidoro.io
#+END_SRC

#+NAME: affiliation
#+BEGIN_SRC text :exports none :noweb yes
Howard Hughes Medical Institute
#+END_SRC

#+NAME: copyright
#+BEGIN_SRC text :exports none :noweb yes
<<release-year()>> <<affiliation>>
#+END_SRC

#+NAME: programming-language
#+BEGIN_SRC text :exports none :noweb yes
KiCad
#+END_SRC

#+NAME: documentation-dir
#+BEGIN_SRC text :exports none :noweb yes
./documentation
#+END_SRC

#+NAME: bom-dir
#+BEGIN_SRC text :exports none :noweb yes
<<documentation-dir>>/bom
#+END_SRC

#+NAME: fabrication-dir
#+BEGIN_SRC text :exports none :noweb yes
<<documentation-dir>>/fabrication
#+END_SRC

#+NAME: pcb-dir
#+BEGIN_SRC text :exports none :noweb yes
<<documentation-dir>>/pcb
#+END_SRC

#+NAME: reference-dir
#+BEGIN_SRC text :exports none :noweb yes
<<documentation-dir>>/reference
#+END_SRC

#+NAME: schematic-dir
#+BEGIN_SRC text :exports none :noweb yes
<<documentation-dir>>/schematic
#+END_SRC

* About

#+BEGIN_SRC markdown :noweb yes
- Name: <<name>>
- Description: <<description>>
- Version: <<version>>
- Release Date: <<release-date>>
- Creation Date: <<creation-date>>
- License: <<license>>
- URL: <<repository-url>>
- Author: <<author>>
- Email: <<email>>
- Copyright: <<copyright>>
- References:
  - <<references>>
#+END_SRC

* Images

#+BEGIN_SRC python :noweb yes :exports results :results output raw
from pathlib import Path
path_strings = ['<<pcb-dir>>/top-assembled.png', '<<pcb-dir>>/bottom-assembled.png']
for path_string in path_strings:
    path = Path(path_string)
    if path.is_file():
        print(f'[[file:./{path}]]\n')
#+END_SRC

* Schematic

#+BEGIN_SRC python :noweb yes :exports results :results output raw
from pathlib import Path
path = Path('<<schematic-dir>>')
for child in path.iterdir():
    if '.pdf' in str(child):
        print(f'[[file:./{child}][./{child}]]\n')
#+END_SRC

#+BEGIN_SRC python :noweb yes :exports results :results output raw
from pathlib import Path
from re import search
from collections import OrderedDict
path = Path('<<schematic-dir>>')
svg_dict = {}
for child in path.iterdir():
    if '.svg' in str(child):
        text = child.read_text()
        # sort by Id inside svg text
        match_object = search('Id:\s*(\d*)', text)
        number = int(match_object.groups()[0])
        svg_dict[number] = f'[[file:./{child}]]'
sorted_svg_dict = OrderedDict(sorted(svg_dict.items()))
for svg_string in sorted_svg_dict.values():
    print(f'{svg_string}\n')
#+END_SRC

* PCB

#+BEGIN_SRC sh :noweb yes :exports results
inkscape --export-area-drawing --export-type=png --export-dpi=300 <<pcb-dir>>/*.svg
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :noweb yes :exports results :results output raw
from pathlib import Path
path_strings = ['<<pcb-dir>>/top-bare.png',
                '<<pcb-dir>>/bottom-bare.png',
                '<<pcb-dir>>/<<name>>-User_Drawings.png']
for path_string in path_strings:
    path = Path(path_string)
    if path.is_file():
        print(f'[[file:./{path}]]\n')
#+END_SRC

* Bill of Materials

#+NAME: pcb-parts
#+BEGIN_SRC python :noweb yes :exports results :results value table
from kicad_bom import KicadBom
kb = KicadBom('./<<name>>/')
bom = kb.get_bom()
bom.insert(1,None)
return bom
#+END_SRC

* Development

1. Install Guix.

[[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html][Install Guix]]

2. Clone repository.

#+BEGIN_SRC sh :noweb yes
git clone <<repository-url>>
cd <<repository-name>>
#+END_SRC

3. Open project in KiCad

#+BEGIN_SRC sh :noweb yes
make project-edits
exit
#+END_SRC

. Open .metadata.org.

#+BEGIN_SRC sh :noweb yes
make metadata-edits
#+END_SRC

4. Modify project specific variables.

#+BEGIN_SRC sh :noweb yes
make metadata
#+END_SRC

* Tangled Files                                                    :noexport:

#+BEGIN_SRC text :tangle AUTHORS :exports none :noweb yes
<<author>>
#+END_SRC

#+BEGIN_SRC js :tangle codemeta.json :exports none :noweb yes
{
    "@context": "https://doi.org/10.5063/schema/codemeta-2.0",
    "@type": "SoftwareSourceCode",
    "license": "https://spdx.org/licenses/<<license>>",
    "codeRepository": "<<code-repository>>",
    "dateCreated": "<<creation-date>>",
    "dateModified": "<<release-date>>",
    "name": "<<name>>",
    "version": "<<version>>",
    "description": "<<description>>",
    "programmingLanguage": [
        "<<programming-language>>"
    ],
    "author": [
        {
            "@type": "Person",
            "givenName": "<<author-given-name>>",
            "familyName": "<<author-family-name>>",
            "email": "<<email>>",
            "affiliation": {
                "@type": "Organization",
                "name": "<<affiliation>>"
            }
        }
    ]
}
#+END_SRC

#+BEGIN_SRC scheme :tangle .channels.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "48329575c87bbee7166eedf10b1699599e67c49d")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
        (name 'guix-janelia)
        (url "https://github.com/guix-janelia/guix-janelia.git")
        (branch "main")
        (commit
          "a082913f2dcfd0aa7d1922e780880505aaf3e2d9")))
#+END_SRC

#+BEGIN_SRC scheme :tangle .manifest.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(specifications->manifest
 '("kicad"
   "kicad-doc"
   "kicad-symbols"
   "kicad-footprints"
   "kicad-packages3d"
   "kicad-templates"
   "make"
   "bash"
   "git"
   "emacs"
   "emacs-org"
   "emacs-ox-gfm"
   "imagemagick"
   "inkscape"
   "python"
   "python-kicad-bom"))
#+END_SRC

#+BEGIN_SRC text :tangle Makefile :exports none :noweb yes
# This file is generated automatically from .metadata.org
# File edits may be overwritten!

.PHONY: upload
upload: metadata package twine add clean

GUIX-SHELL = guix time-machine -C .channels.scm -- shell --pure --check -m .manifest.scm
GUIX-CONTAINER = guix time-machine -C .channels.scm -- shell -m .manifest.scm --container
GUIX-CONTAINER-GUI = $(GUIX-CONTAINER) -E "^DISPLAY$$" -E "^XAUTHORITY$$" --expose="$$XAUTHORITY" --expose=/tmp/.X11-unix/ --expose=$$HOME/.Xauthority --expose=/etc/machine-id

.PHONY: shell
shell:
	$(GUIX-SHELL)

.PHONY: container
container:
	$(GUIX-CONTAINER)

.PHONY: metadata-edits
metadata-edits:
	$(GUIX-CONTAINER-GUI) -- sh -c "emacs -q --no-site-file --no-site-lisp --no-splash -l .init.el --file .metadata.org"

.PHONY: metadata
metadata:
	$(GUIX-CONTAINER) -- sh -c "emacs --batch -Q  -l .init.el --eval '(process-org \".metadata.org\")'"

.PHONY: project-edits
project-edits:
	$(GUIX-SHELL) -- kicad

.PHONY: python-shell
python-shell:
	$(GUIX-CONTAINER) -- python

.PHONY: add
add:
	$(GUIX-CONTAINER) -- sh -c "git add --all"

.PHONY: clean
clean:
	$(GUIX-CONTAINER) -- sh -c "git clean -xdf"
#+END_SRC

#+BEGIN_SRC scheme :tangle .init.el :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(require 'org)

(eval-after-load "org"
  '(require 'ox-gfm nil t))

(setq make-backup-files nil)
(setq org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   (shell . t)
   (python . t)
   (scheme . t)))

(setq org-babel-python-command "python3")

(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)

(defun tangle-org (org-file)
  "Tangle org file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (org-babel-tangle-file org-file))

(defun export-org (org-file)
  "Export org file to gfm file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (let ((org-file-buffer (find-file-noselect org-file)))
    (with-current-buffer org-file-buffer
      (org-open-file (org-gfm-export-to-markdown)))))

(defun process-org (org-file)
  "Tangle and export org file"
  (progn (tangle-org org-file)
         (export-org org-file)))

(make-variable-buffer-local 'org-export-filter-final-output-functions)
(defun my-double-blank-line-filter (output backend info)
  (replace-regexp-in-string "^\n+" "\n" output))
(add-to-list 'org-export-filter-final-output-functions
             'my-double-blank-line-filter)
(defun my-result-keyword-filter (output backend info)
  (replace-regexp-in-string "^#[+]RESULTS:.*\n" "" output))
(add-to-list 'org-export-filter-final-output-functions
             'my-result-keyword-filter)
(defun my-export-filename-filter (output backend info)
  (replace-regexp-in-string "^#[+]EXPORT_FILE_NAME:.*\n" "" output))
(add-to-list 'org-export-filter-final-output-functions
             'my-export-filename-filter)
#+END_SRC

#+BEGIN_SRC text :tangle LICENSE :exports none :noweb yes
Janelia Open-Source Software (3-clause BSD License)

Copyright <<copyright>>

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+END_SRC
